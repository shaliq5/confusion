[{"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\index.js":"1","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\reportWebVitals.js":"2","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\App.js":"3","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\MenuComponents.js":"4","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\shared\\dishes.js":"5","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\dishDetailsComponent.js":"6","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\MainComponent.js":"7","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\HeaderComponent.js":"8","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\FooterComponent.js":"9","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\HomeComponent.js":"10","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\ContactComponent.js":"11","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\shared\\comments.js":"12","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\shared\\leaders.js":"13","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\shared\\promotions.js":"14","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\AboutComponent.js":"15","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\redux\\configureStore.js":"16","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\redux\\dishes.js":"17","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\redux\\comments.js":"18","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\redux\\promotions.js":"19","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\redux\\leaders.js":"20","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\redux\\ActionTypes.js":"21","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\redux\\ActionCreators.js":"22","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\LoadingComponent.js":"23","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\redux\\forms.js":"24","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\shared\\baseURl.js":"25"},{"size":639,"mtime":1612241269916,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":529,"mtime":1614260067040,"results":"29","hashOfConfig":"27"},{"size":2298,"mtime":1614592390576,"results":"30","hashOfConfig":"27"},{"size":1490,"mtime":1612274321734,"results":"31","hashOfConfig":"27"},{"size":8122,"mtime":1614592612937,"results":"32","hashOfConfig":"27"},{"size":3155,"mtime":1614592262516,"results":"33","hashOfConfig":"27"},{"size":5073,"mtime":1614159679913,"results":"34","hashOfConfig":"27"},{"size":2641,"mtime":1612263191631,"results":"35","hashOfConfig":"27"},{"size":1563,"mtime":1614592531571,"results":"36","hashOfConfig":"27"},{"size":9654,"mtime":1614509918802,"results":"37","hashOfConfig":"27"},{"size":4279,"mtime":1612274403608,"results":"38","hashOfConfig":"27"},{"size":2382,"mtime":1612274389655,"results":"39","hashOfConfig":"27"},{"size":445,"mtime":1612274379546,"results":"40","hashOfConfig":"27"},{"size":4359,"mtime":1613036284517,"results":"41","hashOfConfig":"27"},{"size":791,"mtime":1614509919247,"results":"42","hashOfConfig":"27"},{"size":673,"mtime":1614417585426,"results":"43","hashOfConfig":"27"},{"size":817,"mtime":1614591880084,"results":"44","hashOfConfig":"27"},{"size":652,"mtime":1614591900132,"results":"45","hashOfConfig":"27"},{"size":186,"mtime":1614349585652,"results":"46","hashOfConfig":"27"},{"size":413,"mtime":1614590756741,"results":"47","hashOfConfig":"27"},{"size":3195,"mtime":1614673250541,"results":"48","hashOfConfig":"27"},{"size":253,"mtime":1614417267576,"results":"49","hashOfConfig":"27"},{"size":174,"mtime":1614509440591,"results":"50","hashOfConfig":"27"},{"size":48,"mtime":1614590619097,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"19t10xd",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\index.js",[],["110","111"],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\reportWebVitals.js",[],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\App.js",[],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\MenuComponents.js",["112","113"],"import React from 'react';\r\nimport { Card, CardImg , CardImgOverlay , CardBody, CardText, CardTitle, Breadcrumb, BreadcrumbItem} from 'reactstrap';\r\nimport { Link } from 'react-router-dom'; \r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseURl';\r\n\r\n    function RenderMenuItem({dish, onClick}){\r\n        return(\r\n            <Card>\r\n                <Link to= {`/menu/${dish.id}`}>\r\n                    <CardImg width=\"100%\" object src={baseUrl + dish.image} alt={dish.name} />\r\n                    <CardImgOverlay>\r\n                        <CardTitle>{dish.name}</CardTitle>\r\n                    </CardImgOverlay>\r\n                </Link>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    const Menu = (props) => {\r\n        const menu = props.dishes.dishes.map((dish) => {\r\n            return (\r\n                <div key={dish.id} className=\"col-12 col-md-5 m-1\">\r\n                   <RenderMenuItem dish={dish} />\r\n                </div>\r\n            );\r\n        })\r\n\r\n        if(props.dishes.isLoading)  {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                    <Loading />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if (props.dishes.errMess){\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <h4>{props.dishes.errMess}</h4>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Menu</BreadcrumbItem>\r\n                        </Breadcrumb>\r\n                        <div className=\"col-12\">\r\n                            <h3>Today's Special Menu</h3>\r\n                            <hr />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        {menu} \r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\nexport default Menu;","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\shared\\dishes.js",[],["114","115"],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\dishDetailsComponent.js",["116","117","118"],"import React, {Component} from 'react';\r\nimport { Card, CardImg, CardText, CardBody,Modal, ModalHeader, ModalBody,\r\n    CardTitle, Breadcrumb, BreadcrumbItem, Button , Row, Col, Label} from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseURl';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\n\r\n\r\n\r\n    function RenderDish({dish}){\r\n        return(\r\n            \r\n        <div className=\"col-12 col-md-5 m-1\">\r\n            <Card>\r\n                <CardImg src={baseUrl + dish.image} alt={dish.name} />\r\n                <CardBody>\r\n                    <CardTitle>{dish.name}</CardTitle>\r\n                    <CardText>{dish.description}</CardText>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n        \r\n        );\r\n    }\r\n    \r\n    function RenderComments({comments, addComment, dishId}){\r\n        if(comments != null){\r\n            const commentListItems = comments.map((comment) =>{\r\n                return(\r\n                    <li key={comment.id}>\r\n                        <p>Rating - {comment.rating}</p>\r\n                        <p>{comment.comment}</p>\r\n                        <p>--{comment.author} , {new Intl.DateTimeFormat('en-US',{year : 'numeric', month: 'short', day:'2-digit'}).format(new Date(Date.parse(comment.date)))}</p>\r\n                    </li>   \r\n                );\r\n            });\r\n    \r\n            return(\r\n                <Card className=\"col-12 col-md-5 m-1\">\r\n                <h4>Comments : </h4>\r\n                <div className=\"container\">\r\n                <ul className=\"list-unstyled\">{commentListItems}</ul>\r\n                </div>\r\n                <CommentForm dishId={dishId} addComment={addComment} />\r\n                </Card>\r\n            );\r\n        }\r\n        else{\r\n            return(\r\n                <div>\"ERROR 303\"</div>\r\n            );\r\n        }\r\n    }  \r\n    \r\n    class CommentForm extends Component {\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = {\r\n              isModalOpen:false\r\n            };\r\n            this.toggleModal=this.toggleModal.bind(this);\r\n            this.handleSubmit=this.handleSubmit.bind(this);\r\n          }\r\n          \r\n        toggleModal=()=>{\r\n            this.setState({\r\n                isModalOpen: !this.state.isModalOpen\r\n              });\r\n          }\r\n         \r\n          handleSubmit(values) {\r\n            this.toggleModal();\r\n            this.props.addComment(this.props.dishId, values.rating, values.author, values.comment);\r\n        }\r\n         \r\n        render() {\r\n            return (\r\n                <div>\r\n                <Button outline onClick={this.toggleModal}><span className=\"fa fa-pencil fa-lg\"></span> Submit Comment</Button>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                        <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n                        <ModalBody>\r\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n                        <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"rating\" md={2}>Rating</Label>\r\n                                    <Col md={10}>\r\n                                        <Control.select model=\".rating\" name=\"Rating\"\r\n                                            className=\"form-control\">\r\n                                            <option>1</option>\r\n                                            <option>2</option>\r\n                                            <option>3</option>\r\n                                            <option>4</option>\r\n                                            <option>5</option>\r\n                                        </Control.select>\r\n                                    </Col>\r\n                                </Row>\r\n                        <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"author\" md={2}>Your Name</Label>\r\n                                    <Col md={10}>\r\n                                        <Control.text model=\".author\" id=\"author\" name=\"author\"\r\n                                            placeholder=\"Your Name\"\r\n                                            className=\"form-control\"\r\n                                            validators={{\r\n                                                required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                            }}\r\n                                                />\r\n                                        <Errors\r\n                                            className=\"text-danger\"\r\n                                            model=\".author\"\r\n                                            show=\"touched\"\r\n                                            messages={{\r\n                                                required: 'Required',\r\n                                                minLength: 'Must be greater than 2 characters',\r\n                                                maxLength: 'Must be 15 characters or less'\r\n                                            }}\r\n                                            />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"Comment\" md={2}>Comment</Label>\r\n                                    <Col md={10}>\r\n                                        <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\"\r\n                                            rows=\"6\"\r\n                                            className=\"form-control\" />\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"form-group\">\r\n                                    <Col md={{size:1, offset: 2}}>\r\n                                        <Button type=\"submit\" color=\"primary\">\r\n                                        Submit\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </LocalForm>\r\n                        </ModalBody>\r\n                    </Modal>\r\n                    </div>\r\n            )\r\n        }\r\n    }    \r\n    \r\n    const DishDetail = (props) =>{\r\n        if(props.isLoading)  {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                    <Loading />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if (props.errMess){\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <h4>{props.errMess}</h4>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if(props.dish!=null){\r\n        return(\r\n            <div className=\"container\" >\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to='/menu'>Menu</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>{props.dish.name}</h3>\r\n                        <hr />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <RenderDish dish={props.dish} />\r\n                    <RenderComments comments={props.comments} addComment={props.addComment} dishId={props.dish.id} />\r\n                </div>\r\n            </div>\r\n        );\r\n        }\r\n        else{\r\n            return(<div></div>);\r\n        }\r\n        \r\n    }\r\n    \r\n\r\nexport default DishDetail;\r\n\r\n","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\MainComponent.js",["119"],"import React, { Component } from 'react';\r\nimport Home from './HomeComponent';\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport Menu from './MenuComponents';\r\nimport Contact from './ContactComponent';\r\nimport About from './AboutComponent';\r\nimport DishDetail from './dishDetailsComponent';\r\nimport { Switch, Route , Redirect, withRouter} from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { addComment, fetchComments, fetchDishes, fetchPromos } from '../redux/ActionCreators';\r\nimport { actions } from 'react-redux-form';\r\n\r\nconst mapStatetoProps = state => {\r\n    return{\r\n      dishes: state.dishes,\r\n      comments:state.comments,\r\n      promotions:state.promotions,\r\n      leaders:state.leaders\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addComment: (dishId, rating, author, comment) => dispatch(addComment(dishId, rating, author, comment)),\r\n  fetchDishes: () => {dispatch(fetchDishes())},\r\n  resetFeedbackForm: () => { dispatch(actions.reset('feedback'))},\r\n  fetchComments: () => {dispatch(fetchComments())},\r\n  fetchPromos: () => {dispatch(fetchPromos())}\r\n});\r\n\r\n\r\nclass Main extends Component {\r\n\r\n  constructor(props){\r\n    super(props); \r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchDishes();\r\n    this.props.fetchPromos();\r\n    this.props.fetchComments();\r\n  }\r\n\r\n  render() {\r\n    const HomePage = () => {\r\n      return(\r\n        <Home dish={this.props.dishes.dishes.filter((dish) => dish.featured)[0]}\r\n        dishesLoading={this.props.dishes.isLoading}\r\n        dishesErrMess={this.props.dishes.errMess}\r\n        promotion={this.props.promotions.promotions.filter((promo) => promo.featured)[0]}\r\n        promosLoading={this.props.promotions.isLoading}\r\n        promosErrMess={this.props.promotions.errMess}\r\n        leader={this.props.leaders.filter((leader) => leader.featured)[0]}\r\n        />\r\n      );\r\n    }\r\n    const DishWithId = ({match}) => {\r\n      return(\r\n        <DishDetail dish={this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId,10))[0]}\r\n        isLoading={this.props.dishes.isLoading}\r\n        errMess={this.props.dishes.errMess}\r\n        comments={this.props.comments.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId,10))}\r\n        commentsErrMess={this.props.comments.errMess} \r\n        addComment={this.props.addComment}\r\n        />\r\n      );\r\n\r\n    }\r\n    return (\r\n      <div>\r\n        <Header />\r\n          <Switch>\r\n              <Route path='/home' component={HomePage} />\r\n              <Route exact path=\"/menu\" component={()=> <Menu dishes={this.props.dishes}/>} />\r\n              <Route path=\"/menu/:dishId\" component={DishWithId} />\r\n              <Route exact path=\"/contact\" component={() => <Contact resetFeedbackForm={this.props.resetFeedbackForm} />} />\r\n              <Route exact path=\"/about\" component={() => <About leaders={this.props.leaders} />} />\r\n              <Redirect to=\"/home\" /> \r\n          </Switch>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  };\r\n  \r\n}\r\n\r\nexport default withRouter(connect(mapStatetoProps, mapDispatchToProps)(Main));\r\n","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\HeaderComponent.js",[],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\FooterComponent.js",[],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\HomeComponent.js",[],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\ContactComponent.js",["120","121","122","123","124","125","126","127","128"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Label, Col, Row } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport {Control, Form, Errors, actions } from 'react-redux-form';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass Contact extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    handleSubmit(values) {\r\n        console.log(\"Current State is :\"+ JSON.stringify(values));\r\n        alert(\"Current State is :\"+ JSON.stringify(values));\r\n        this.props.resetFeedbackForm();\r\n    }\r\n\r\n   render() {\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                    <Breadcrumb>\r\n                    <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n                    <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                        <hr />\r\n                    </div>\r\n            </div>\r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12\">\r\n                <h3>Location Information</h3>\r\n                </div>\r\n                <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                        <h5>Our Address</h5>\r\n                        <address>\r\n                        121, Clear Water Bay Road<br />\r\n                        Clear Water Bay, Kowloon<br />\r\n                        HONG KONG<br />\r\n                        <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                        <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                        <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                        </address>\r\n                </div>\r\n                <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                    <h5>Map of our Location</h5>\r\n                </div>\r\n                <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                    <div className=\"btn-group\" role=\"group\">\r\n                        <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                        <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                        <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row row-content\">\r\n                <div className=\"col-12\">\r\n                    <h3>Send us your Feedback</h3>\r\n                </div>\r\n                <div className=\"col-12 col-md-9\">\r\n                    <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\" placeholder=\"First Name\" className=\"form-control\" \r\n                                validators={{\r\n                                    required, minLength: minLength(3), maxLength:maxLength(15) \r\n                                }}\r\n                                />\r\n                                <Errors \r\n                                className=\"text-danger\"\r\n                                model=\".firstname\"\r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    required: 'Required ',\r\n                                    minLength: 'Must be greater than 2 characters',\r\n                                    maxLength: 'Must be 15 characters or less'\r\n                                }}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\" placeholder=\"Last Name\" className=\"form-control\" \r\n                                validators={{\r\n                                    required, minLength: minLength(3), maxLength:maxLength(15) \r\n                                }}\r\n                                />\r\n                                <Errors \r\n                                className=\"text-danger\"\r\n                                model=\".lastname\"\r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    required: 'Required ',\r\n                                    minLength: 'Must be greater than 2 characters',\r\n                                    maxLength: 'Must be 15 characters or less'\r\n                                }}\r\n                                />  \r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"telnum\" md={2}>Contact Number</Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".telnum\" type=\"tel\" id=\"telnum\" name=\"telnum\" placeholder=\"Contact Number\" className=\"form-control\" \r\n                                validators={{\r\n                                    required, minLength: minLength(7), maxLength:maxLength(15) , isNumber\r\n                                }}\r\n                                />\r\n                                <Errors \r\n                                className=\"text-danger\"\r\n                                model=\".telnum\"\r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    required: 'Required ',\r\n                                    minLength: 'Must be greater than 6 numbers',\r\n                                    maxLength: 'Must be 15 numbers or less',\r\n                                    isNumber: 'Must be a number'\r\n                                }}\r\n                                />  \r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"email\" md={2}>Email Address</Label>\r\n                            <Col md={10}>\r\n                                <Control.text model=\".email\" id=\"email\" name=\"email\" placeholder=\"Email Address\" className=\"form-control\" \r\n                                validators={{\r\n                                    required, validEmail\r\n                                }}\r\n                                />\r\n                                <Errors \r\n                                className=\"text-danger\"\r\n                                model=\".email\"\r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    required: 'Required ',\r\n                                    validEmail: 'Enter a valid email'\r\n                                }}\r\n                                />  \r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Col md={{size:5,offset:2}}>\r\n                                <div className=\"form-check\">\r\n                                    <Label check>\r\n                                        <Control.checkbox model=\".agree\" name=\"agree\" className=\"form-check-input\" />\r\n                                        {' '} <strong>May we contact you?</strong>\r\n                                    </Label>\r\n                                </div>\r\n                            </Col>\r\n                            <Col md={{size:4,offset:1}}>\r\n                                <Control.select model=\".contactType\" name=\"contactType\" className=\"form-control\">\r\n                                    <option>Telephone</option>\r\n                                    <option>Email</option>\r\n                                </Control.select>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                            <Col md={10}>\r\n                                <Control.textarea model=\".message\" id=\"message\" name=\"message\" placeholder=\"Enter your feedback.\" rows=\"5\" className=\"form-control\"/>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"form-group\">\r\n                            <Col md={{size: 10, offset: 2}}>\r\n                                <Button type=\"submit\" color=\"primary\">\r\n                                    Send Feedback\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n   }  \r\n}\r\n\r\nexport default Contact;","D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\shared\\comments.js",[],["129","130"],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\shared\\leaders.js",[],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\shared\\promotions.js",[],["131","132"],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\AboutComponent.js",[],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\redux\\configureStore.js",[],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\redux\\dishes.js",[],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\redux\\comments.js",[],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\redux\\promotions.js",[],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\redux\\leaders.js",[],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\redux\\ActionTypes.js",[],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\redux\\ActionCreators.js",["133"],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\components\\LoadingComponent.js",[],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\redux\\forms.js",[],"D:\\Web Dev\\Coursera-1\\react\\confusion\\src\\shared\\baseURl.js",[],{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":2,"column":43,"nodeType":"140","messageId":"141","endLine":2,"endColumn":51},{"ruleId":"138","severity":1,"message":"142","line":2,"column":53,"nodeType":"140","messageId":"141","endLine":2,"endColumn":61},{"ruleId":"134","replacedBy":"143"},{"ruleId":"136","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":92,"column":41,"nodeType":"147","endLine":93,"endColumn":70},{"ruleId":"145","severity":1,"message":"148","line":105,"column":41,"nodeType":"147","endLine":111,"endColumn":51},{"ruleId":"145","severity":1,"message":"149","line":127,"column":41,"nodeType":"147","endLine":129,"endColumn":72},{"ruleId":"150","severity":1,"message":"151","line":34,"column":3,"nodeType":"152","messageId":"153","endLine":37,"endColumn":4},{"ruleId":"138","severity":1,"message":"154","line":4,"column":32,"nodeType":"140","messageId":"141","endLine":4,"endColumn":39},{"ruleId":"155","severity":1,"message":"156","line":60,"column":25,"nodeType":"147","endLine":60,"endColumn":67},{"ruleId":"145","severity":1,"message":"148","line":74,"column":33,"nodeType":"147","endLine":78,"endColumn":35},{"ruleId":"145","severity":1,"message":"148","line":94,"column":33,"nodeType":"147","endLine":98,"endColumn":35},{"ruleId":"145","severity":1,"message":"148","line":114,"column":33,"nodeType":"147","endLine":118,"endColumn":35},{"ruleId":"145","severity":1,"message":"148","line":135,"column":33,"nodeType":"147","endLine":139,"endColumn":35},{"ruleId":"145","severity":1,"message":"157","line":155,"column":41,"nodeType":"147","endLine":155,"endColumn":118},{"ruleId":"145","severity":1,"message":"146","line":161,"column":33,"nodeType":"147","endLine":161,"endColumn":114},{"ruleId":"145","severity":1,"message":"149","line":170,"column":33,"nodeType":"147","endLine":170,"endColumn":166},{"ruleId":"134","replacedBy":"158"},{"ruleId":"136","replacedBy":"159"},{"ruleId":"134","replacedBy":"160"},{"ruleId":"136","replacedBy":"161"},{"ruleId":"138","severity":1,"message":"162","line":2,"column":10,"nodeType":"140","messageId":"141","endLine":2,"endColumn":16},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"no-unused-vars","'CardBody' is defined but never used.","Identifier","unusedVar","'CardText' is defined but never used.",["163"],["164"],"react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'actions' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["163"],["164"],["163"],["164"],"'DISHES' is defined but never used.","no-global-assign","no-unsafe-negation"]